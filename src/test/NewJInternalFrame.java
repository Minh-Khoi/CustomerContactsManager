/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Dimension;
import javax.swing.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import model.dao.*;
import model.dto.*;

/**
 *
 * @author KHOI
 */
public class NewJInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form NewJInternalFrame
     */
    public NewJInternalFrame(Dimension size) {
        initComponents();
        this.setSize(size);
        setTableOfCustomerList();
    }
    
    
    /**
     * Set datas for a row in jTable with the following collumns 
     * @param customerID
     * @param customerName
     * @param address
     * @param phoneNum
     * @param email
     * @return an array (for the setTableModel())
     */
    private Vector<Object> setDatasForARow(int customerID, String customerName, String address, String phoneNum, String email){
        Object[] rowOfDatas = {customerID, customerName, address, phoneNum, email};
        return  new Vector<Object>(Arrays.asList(rowOfDatas));
    }
    /**
     * concat multiple phone number of a customer into a String
     * @param list of PhoneNumbers
     * @return A String that list all phone numbers of the customer whose the customerID
     */
    private String setPhoneNumbersString(List<PhoneNumbers> list){
        StringBuilder str = new StringBuilder("");
        str.append("<html>");
        for(PhoneNumbers phone : list){
            str.append( phone.getPhoneNumber());
            if (list.indexOf(phone)!=list.size()-1) str.append("<br/>");
        }
        str.append("</html>");
        return str.toString();
    }
    /**
     * concat multiple emails of a customer into a String
     * @param list of Emails
     * @return A String that list all emails of the customer whose the customerID
     */
    private String setEmailsString(List<Emails> list){
        StringBuilder str = new StringBuilder("");
        str.append("<html>");
        for(Emails em : list){
            str.append(em.getEmail());
            if (list.indexOf(em)!=list.size()-1) str.append("<br/>");
        }
        str.append("</html>");
        return str.toString();
    }
    /**
     * Used in order to wrap text in the JTable at column Phone numbers and Emails
     * @param row
     * @return the height (Integer)
     */
    private int findRowHeight(int row){
        String valueOfPhoneNums =(String) tableOfCustomerList.getModel().getValueAt(row,3);
        String valueOfEmails =(String) tableOfCustomerList.getModel().getValueAt(row,4);
        String[] arrayOfPhoneNums = valueOfPhoneNums.split("<br/>");
        String[] arrayOfEmails = valueOfEmails.split("<br/>");
        return Math.max(arrayOfEmails.length, arrayOfPhoneNums.length);
    }
    /**
     * set and display datas for table
     */
    private void setTableOfCustomerList(){
        int customerID;
        String customerName, address, phoneNums, emails;
        List<Vector<Object>> datas = new ArrayList<>();
        CustomersDAO customerDAO = new CustomersDAO();
        PhoneNumbersDAO phoneDAO = new PhoneNumbersDAO();
        EmailDAO emailDAO = new EmailDAO();
        List<Customers> customersList = customerDAO.readAll();
        for(Customers cus : customersList){
            customerID = cus.getCustomerID();
            customerName = cus.getCustomerName();
            address = cus.getAddress();
            phoneNums = setPhoneNumbersString( phoneDAO.readByCustomerID(customerID));
            emails = setEmailsString(emailDAO.readByCustomerID(customerID));
            datas.add(setDatasForARow(customerID, customerName, address, phoneNums, emails));
        }
        Collections.sort(datas, new Comparator<Vector<Object>>(){
            @Override
            public int compare(Vector<Object> o1, Vector<Object> o2) {
                return o1.get(1).toString().compareToIgnoreCase(o2.get(1).toString()); //To change body of generated methods, choose Tools | Templates.
            }
        });
        Object[] columnName = {"customer ID", "customer name", "address", "list phone numbers", "list emails"};
        tableOfCustomerList = new JTable(new DefaultTableModel(new Vector(datas), new Vector(Arrays.asList(columnName))));
        for(int i=0;i<datas.size();i++){
            tableOfCustomerList.setRowHeight(i, 15*findRowHeight(i));
        }
        jScrollPane1.setViewportView(tableOfCustomerList);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOfCustomerList = new javax.swing.JTable();
        removeButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        customerNameField = new javax.swing.JTextField();
        buttonFindCustomer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableOfCustomerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableOfCustomerList);

        removeButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        removeButton.setForeground(new java.awt.Color(0, 51, 51));
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        updateButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        updateButton.setForeground(new java.awt.Color(0, 51, 51));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        customerNameField.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        customerNameField.setText("Enter Name");

        buttonFindCustomer.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        buttonFindCustomer.setForeground(new java.awt.Color(0, 51, 51));
        buttonFindCustomer.setText("Find");
        buttonFindCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFindCustomerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(buttonFindCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonFindCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * find the Customer whose has the name 
     * @param name
     * @return a Customers
     */
    private Customers readCustomerByName(String name) {
        CustomersDAO cusDAO = new CustomersDAO();
        List<Customers> cusList = cusDAO.readAll();
        if(cusList.size()>0){
            for(Customers cus :cusList){
                if(cus.getCustomerName().equalsIgnoreCase(name)) return cus;
            }
        }
        return null;
    }
    private void buttonFindCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFindCustomerActionPerformed
        String customerName = customerNameField.getText();
        int customerID;
        String  address, phoneNums, emails;
        List<Vector<Object>> datas = new ArrayList<>();
        CustomersDAO customerDAO = new CustomersDAO();
        PhoneNumbersDAO phoneDAO = new PhoneNumbersDAO();
        EmailDAO emailDAO = new EmailDAO();
        address = readCustomerByName(customerName).getAddress();
        List<PhoneNumbers> phoneList = phoneDAO.readByCustomerID(readCustomerByName(customerName).getCustomerID());
        phoneNums = setPhoneNumbersString(phoneList);
        List<Emails> emailList = emailDAO.readByCustomerID(readCustomerByName(customerName).getCustomerID());
        emails = setEmailsString(emailList);
        customerID=readCustomerByName(customerName).getCustomerID();
        datas.add(setDatasForARow(customerID, customerName, address, phoneNums, emails));
        Object[] columnNames = {"customer ID", "customer name", "address", "list phone numbers", "list emails"};
        tableOfCustomerList= new JTable(new DefaultTableModel(new Vector(datas), new Vector(Arrays.asList(columnNames))));
        for(int i=0;i<datas.size();i++){
            tableOfCustomerList.setRowHeight(i, 15*findRowHeight(i));
        }
        jScrollPane1.setViewportView(tableOfCustomerList);
    }//GEN-LAST:event_buttonFindCustomerActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int indexRemoved = tableOfCustomerList.getSelectedRow(), customerID =(int) tableOfCustomerList.getValueAt(indexRemoved, 0);
        CustomersDAO customerDAO = new CustomersDAO();
        customerDAO.delete(customerID);
        setTableOfCustomerList();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        String customerName =(String) tableOfCustomerList.getValueAt(tableOfCustomerList.getSelectedRow(), 1);
        UpdateFrame updateFr = new UpdateFrame(customerName);
        updateFr.setVisible(true);
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJInternalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJInternalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJInternalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJInternalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJInternalFrame(new Dimension(690,612)).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonFindCustomer;
    private javax.swing.JTextField customerNameField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable tableOfCustomerList;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
